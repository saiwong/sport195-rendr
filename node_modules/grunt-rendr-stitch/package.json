{
  "name": "grunt-rendr-stitch",
  "description": "Use Stitch to package up your modules for use with Rendr (github.com/airbnb/rendr).",
  "version": "0.0.2",
  "homepage": "",
  "author": {
    "name": "Spike Brehm",
    "email": "ocelot@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "github.com/airbnb/grunt-rendr-stitch.git"
  },
  "bugs": {
    "url": ""
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "stitch": "~0.3.3",
    "coffee-script": "~1.6.2"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt": "~0.4.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "keywords": [
    "gruntplugin"
  ],
  "readme": "# grunt-rendr-stitch\n\n> Use Stitch to package up your modules for use with Rendr (github.com/airbnb/rendr).\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-rendr-stitch --save-dev\n```\n\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-rendr-stitch');\n```\n\n## The \"rendr_stitch\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `rendr_stitch` to the data object passed into `grunt.initConfig()`.\n\nIn this example, you can see how to use `options.dependencies` and `options.aliases`.\n\n```js\ngrunt.initConfig({\n  rendr_stitch: {\n    options: {\n      dependencies: [\n    \t'assets/vendor/**/*.js'\n      ],\n      aliases: [\n      \t{from: 'node_modules/rendr/shared', to: 'rendr/shared'},\n      \t{from: 'node_modules/rendr/client', to: 'rendr/client'}\n      ]\n    },\n    files: {\n      dest: 'public/bundle.js',\n      src: [\n      \t'app/**/*.js',\n      \t'node_modules/rendr/shared/**/*.coffee',\n      \t'node_modules/rendr/client/**/*.coffee'\n      ]\n    }\n  }\n});\n```\n\nWe can then use Stitch in the browser to require any of the source files.\n\n```js\nvar UserShowView = require('app/views/user_show_view');\n```\n\nAliases allow us to use the the same paths for requiring NPM modules in both Node.js and in the browser. For example:\n\n```js\nvar BaseView = require('rendr/shared/base/view');\n```\n\nIn Node.js, this path will tell the module loader to look into the NPM module named `rendr` to find the specified module. In the browser, we can do the same thing because we've bundled `node_modules/rendr/shared/**/*.coffee` and set up an alias to `rendr/shared`.\n\n### Options\n\n#### options.dependencies\nType: `Array`\nDefault value: `[]`\n\nAn array of file glob patterns to pass as dependencies to `stitch.createPackage()`. These files are prepended to the bundled JavaScript package as-is, without being wrapped as a Stitch module. This is useful for third-party client-side only files, such as jQuery, that aren't wrapped in a CommonJS module.\n\n#### options.aliases\nType: `Array`\nDefault value: `[]`\n\nAliases provide a way to do fancy bundling of Stitch packages in order to replicate something like NPM module paths from Node. Each element in the array is an object with `from` and `to` properties. For example:\n\n```js\ndependencies: [\n  {from: 'some/path/on/disk', to: 'fancy/path/in/client'}\n]\n``` \n\nSuppose the `some/path/on/disk` directory looks like this:\n\n    |- util.js\n    |- lib/something.js\n\nThen, in the client-side you can require the module using the aliased path:\n\n```js\nvar something = require('fancy/path/in/client/lib/something');\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n\n### 0.0.1\nInitial release.\n",
  "readmeFilename": "README.md",
  "_id": "grunt-rendr-stitch@0.0.2",
  "_from": "grunt-rendr-stitch@~0.0.2"
}
